For the project i will be building n*n tic tac toe.

I do most of my logic writing and designing on my notepad using pen and paper, so will attach all those things with the mail.

This is my first attempt at a react project with typescript so there will be a lot of google searches involved. I will keep explaining my steps in the readme file.

* Since i am doing this in between my meetings and office schedules, this might be broken up into parts, although i will try my best to cover it in sections and pick up from where i leave of.

Steps involved:

During my initial days of learning React , i built the basic 3*3 tic tac toe present in the React tutorial, so my current n*n tic tac toe will be inspired by it a little. 

1) Clean up the starter code
2) Building the rough UI on paper (Mostly figmas are provided to me but when i am building something on my own i like to draw it out on paper). Will attach the same
3) Based on my current thinking i will be making following components which might help me get the whole app together in the end:
a) Game Component => TicTac main code
b) Board Component => Where the design will be rendered
c) Square / Cell Component => Where the user will click and the move is decided
d) Winner Screen => Once a winner is decided may be an overlay screen that has an option to restart the game 
e) History Component => As i mentioned this is inspired by the react tutorial, i will try and implement state management to manage the past moves so the user can go back and decide.


In a typical React project i usually build my components as follows:
components-folder/
        component-name/-
                        component-name.container.jsx = This involves all the state related tasks and async tasks 
                        component-name.component.jsx = this is just for the view part 
                        component-name.style.scss = I usually prefer scss because i try to avoid nested codes using this. Else css works fine
                        component-name.styling.jsx = My favorite library to use is styled-components but i implement it only when i know i have ample time, so this is last step.

For a typescript version of the app the extension would be .tsx as read from the documentation


Folder steps
1) Game => //Since this component will include the state it will be a class
2) Since this has to be an n*n tic tac toe, i will be keeping in mind not to hardcode the value of "n" but for starter logics i am considering a 3*3 matrix.
And since each square will be clickable with an attached on click event the best way is to make each square as a button


//Sorry had a meeting at 2.

First i will try to make the squares rendered dynamic since the styling og squares will depend on the number passed

//Deciding the styles logic in notebook

For the value of n provided a loop should be run that determines the display element should have the style "inline-block" or "block"

I usually make a sticky note of all the tasks or code refactoring i will be doing later to remember if something is to be changed 


//Restarting fresh on the onclick logic.. Got confused


The function has to be passed from Game component to Board component to Square component so that when square component is clicked, the state in the parent component (Game) modifies.


Checking in the code till it works correctly 


Sorry about the typescript blunders, still getting used to all this stuff.

Moving to a new concept to take a timeout from this event handling stuff.

Since each click on the square will call a function that determines the winner logic for the tic tac, i will start building up that logic. 


Couldnt think of a better way to implement diagonal logic so writing an inverted diagonal logic 

Sorry about the hit and trial, the binding in ts messed me up a little.

Currently numbers are rendering to the matrix, to determine what will be rendered in the tic tac board i will be passing value based on willXComeNext

The value of X and O is already being passed in the squares array being passed down to square so i will take advantage of that rather than write a new logic based on willXComeNext


Sorry it took time to debug.. Moving ahead with the game

Okay so far so good.. Moving to the winning logic.. 


The rendering of the tic tac board still depends on a hard coded value, which is the next on the task, so i will be changing that.

Next comes the history/state management for the game. I will be using react state and immutability to store the current moves played already on the board. 


There seems to be an issue with the move back into history state.. I will have my dinner and get back to it..

Tasks remaining:

1) Make the tic tac toe rendered dynamic
2) Design the game to look better
3) Game over popup and better looking history panel so the use can go back


Designing the game

Usually i like to pick nice gradients and write inline styles which i move to specific css / scss files later on.

I like to look at some inspirations too go through pinterest or dribble

I decided to go with some glossy buttons and a nice shaded background



Due to the screen recording videos my storage is running out.. Sorry .. Let me clean it up and get back to coding ..

Managed to clean up some space.. Will continue working now..


Moving the logic of "n" to a dynamic logic

Instead of making separate header code i will be moving the code inside App component itself so the refs can be directly passed


Kinda stuck in this TS bug. Will continue with it tomorrow and try to fix it.


Starting again fresh today, my system is running low on storage so i am simultaneously moving screen recordings to the drive.. Sorry for random screens


Due to width issues i am setting the board to max of 12. If an overflow can be provided this can go upto a higher value of "n"


Sorry was having breakfast. I will be finishing up the code, refactoring it a little bit and push the code to my git. I will also be pushing the built code to heroku for you to see the demo of completed app. 

I will attach all the readme with the code and the notebook scribbling and logics i decided on paper.


Thankyou so much :)

I have some meetings and knowledge transfers lined up for the weekend but if i get time i might add "Redux" to the project and push the code for you to review.


Hopefully this was okay for you to see my though process. :)